#    Xforms.functions - An extension to Perl to access Xforms functions.
#    Copyright (C) 1996-1997  Martin Bartlett
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

These are the functions that the Xforms extension to PERL implements. 
They are grouped by general functionality. Use this file to verify a function's
call protocol, especially if get you a message:

	'Usage: <function name>. See Xforms4Perl documentation.'

at execution time.

Where the protocol is the same from PERL as from C there is no comment. This
is the case with a majority of the functions. Where there are differences I
have indicated the PERL protocol to use. All parameters are PERL scalars
set to their intuitive values, and all return values (except where indicated)
are also scalars, set in such a way that, if they are used in further xforms
functions they behave as expected.

Some functions can accept variable length parameter lists (generally where
the corresponding C function accepts a pointer to a list of values). These
functions are indicated below with the optional parts of the parameter lists
enclosed in square brackets. The square brackets themseleves are NOT required
as part of the call protocol, they are only there to distinguish between
the required and optional portions of those lists.

Functions marked with '##' at the beginning of the line are not part of the 
xforms C library - they have been added to make life a little easier and 
generally provide X library functions required to make the DEMOS work!! 

GENERAL NOTES:

	The functionality exists in a single perl package named Xforms. To
	access the functionality, place the following statement at the top of
	your perl script:

		use Xforms;

	ALL the functions take scalar parameters when they take any parameters
	at all. There are no functions that require array parameters as input.

	Where a function has more than one output value, it is implemented to
	provide its output as a perl list. In such cases, the value of the
	C function (if any) will be the first element, with the other output
	values in the following elements in the order that they appear in
	equivalent C function prototype.

	In general, I have tried to make this package so that the user can
	read the Xforms documentation and directly apply that information
	to creating a perl application, after making the usual C-to-perl
	modifications. Examples of such modifications can be seen be comparing
	the demos that come with xforms to those that come with Xforms4Perl -
	most of the latter group have been directly derived from the former
	group.

	The package supports multiple versions of xforms. If you attempt to
	use afacility that is not available in your version you will get a nice
	friendly message informing you of your problem and your perl script
	will die.

	Call protocols, where not specifically detailed below, conform to the
	version of xforms you are using. So, for example, if you use
	fl_show_choice with 0.81 and then change to 0.86, you will have to
	change your perl script to use the new protocol for that function.

ACCESSING XFORMS DATA STRUCTURE FIELDS

	The FL_FORM, FL_OBJECT, FL_IOPT, FD_CMDLOG, FD_FSELECTOR and 
	FL_EditKeymap structures have been defined as Perl objects (within 
	the Xforms4Perl package). Therefore, certain fields in each structure 
	can be directly read. In addition, all fields within the FL_IOPT 
	structure, and many within the FL_FORM and FL_OBJECT structures, can 
	be updated too. 

	The syntax to read a field is:

		$struc_ref->field_name  

	and to write a writable field is

		$struc_ref->field_name(new_value)

	where '$struc_ref' is the 'blessed' perl object returned by such 
	functions as fl_get_fselector_fdstruct, fl_get_command_log_fdstruct,
	fl_<create/add>_<object type> and fl_bgn_form. In fact the return
	value of any function that, in xforms itself, returns one of the above
	structures, can be used as the '$struc_ref' part of a field access.

	The available fields in each structure, together with an indication 
	of whether each field is read-only (ro) or read-write (rw), are
	as follows:

		FD_CMDLOG
			All fields are avaialable read-only. However, since
			the fields themselves contain FL_FORM or FL_OBJECT 
			structures, the fields within those structures can
			be accessed as below.

		FD_FSELECTOR
			All fields are avaialable read-only. However, since
			the fields themselves contain FL_FORM or FL_OBJECT 
			structures, the fields within those structures can
			be accessed as below.

		FL_FORM
			compress_mask		rw
			deactivated		rw
			evmask			rw
			first			ro
			focusobj		ro
			frozen			rw
			h			rw
			has_auto		rw
			hotx			rw
			hoty			rw
			icon_mask		rw
			icon_pixmap		rw
			label			rw
			last			ro
			prop			rw
			top			rw
			u_ldata 		rw	
			u_vdata 		rw	(see notes below)
			use_pixmap		rw
			visible			rw
			vmode			rw
			w			rw
			window			ro
			wm_border		rw
			x			rw
			y			rw

		FL_OBJECT
			active			rw
			align			rw
			argument		rw
			automatic		rw
			belowmouse		rw
			boxtype			rw
			bw			rw
			click_timeout		rw
			clip			rw
			col1			rw
			col2			rw
			double_buffer		rw
			focus			rw
			form			ro
			h			rw
			input			rw
			label			rw
			lcol			rw
			lsize			rw
			lstyle			rw
			next			ro
			nwgravity		rw
			objclass		rw
			prev			ro
			pushed			rw
			radio			rw
			redraw			rw
			resize			rw
			segravity		rw
			type			rw
			u_ldata 		rw	
			u_vdata			rw      (see notes below) 
			use_pixmap		rw
			visible			rw
			w			rw
			wantkey			rw
##			window 			ro
				(virtual field equivalent to $obj->form->window)
			x			rw
			y			rw

		FL_IOPT
			All fields in this structure are available as read-
			write fields. In addition, there is an extra 'method'
			provided that returns a blank FL_IOPT object:

				$iopt = FLOpt::new;

			Alternatively, a populated FL_IOPT object can be 
			obtained using the fl_get_defaults function.

		FL_EditKeymap
			This is a version 0.85 struture used with the 
				
				fl_set_input_editkeymap

			function. All fields in this structure are available 
			as read-write fields. In addition, there is an extra 
			'method' provided that returns a blank object:

				$keymap = FLEditKeymap::new;

			The idea here is to use the 'new' method to create
			the object, use the $ref->field' syntax to set the
			edit key mapping requirements, and then pass the
			object to the fl_set_input_editkeymap function. 

	Note that the u_vdata fields of FL_FORM and FL_OBJECT objects 
	accessed in this way are not the 'real' ones. They are are 'psuedo'
	fields held else-where in the Xforms4Perl package, but which serve
	the same purpose as the real ones. The real ones are used internally
	by the package and, therefore, must not be manipulated by the
	application.

	Note also that just because a field is read-write does not mean that
	you SHOULD write to it. Refer to the xforms documentation for details
	of the use of each field, and if and when a field should be written
	to.  

A NOTE ON CALLBACKS:

	To save me explaining the slight differences in the syntaxes required
	to register perl subroutines as callbacks, these are the general
	rules:

	1)	Where you expect to pass the address of a callback routine 
		in the functions that register callbacks, pass either a 
		pointer to the perl subroutine that you wish to register, or 
		a string containing its name. 

	2)	Where the callback can accept a user data pointer set in the 
		'register' function, you can pass any perl scalar. However, 
		note that it is that scalar that will be returned when the
		callback is invoked, not a copy of it. Therefore if the value
		of the scalar changes between the time the callback is
		registered and the time it is invoked, the NEW value is
		passed to the callback. This is in line with pointer usage
		in C - if the storage the pointer references is modified
		between registration and invocation, the callback sees the
		modified value.
 
	3)	Where the C function that sets the callback returns a pointer
		to the previous callback, the perl equivalent returns the
		pointer to the previous perl callback sub.
 
-------------------------------------------------------------------------------

GENERAL FUNCTIONS

	fl_add_io_callback	fl_add_io_callback(file_descriptor, 
						   condition, 
						   callback, 
						   user_parm)
	fl_add_signal_callback
0.84	fl_add_timeout
	fl_app_signal_direct
	fl_current_form		fl_current_form() 
		This function returns a 'FL_FORM *' representing the 
		contents of the fl_current_form field
	fl_default_win
	fl_default_window
	fl_display		fl_display() 
		This function returns a 'Display *' representing the 
		contents of the fl_display field
	fl_finish
	fl_get_app_resources
	fl_get_border_width
	fl_get_coordunit
	fl_get_display
	fl_get_fntstruct
	fl_get_fontstruct
	fl_get_font_struct
	fl_get_form_vclass
	fl_get_resource
	fl_gettime		($sec, $usec) = fl_gettime()
	fl_get_vclass
	fl_get_vmode
	fl_get_visual_depth
	fl_initialize		
		fl_initialize("X_class_name"[,opt1,spec1,Xkind,val[...]]) 
		The processing of @ARGV takes place as described in 
		the XForms doc, but it does so under the covers.

		Xrm Option specifications can be added to the parm list. 
		Basically each quartet of values represents an FL_CMD_OPT
		structure. The 'Xkind' variable is of type XrmOptionKind BUT
		I have been nice: I have added constants that give these X
		values FL_ style names. Just take the Xrmoption... name and
		replace the 'Xrmo' with 'FL_O' for the new constant name. The
		value parameter MUST be provided on ALL options, but is 
		ignored as a value except for FL_OptionNoArg 'Xkinds' (ie its
		a placeholder for all other kinds to make the option processing
		easier!!). Again, see the XForms doc for details of how to
		use this facility, then make the logical transforms to perl.
	fl_keypressed
	fl_keysym_pressed
	fl_library_version
		($ver_rel, $ver, $rel) = fl_library_version();
	fl_msleep
	fl_register_callback
	fl_remove_io_callback	fl_remove_io_callback(file_descriptor, 
						      condition) 
	fl_remove_signal_callback
0.84	fl_remove_timeout
0.84	fl_ringbell
	fl_root		fl_root() 
		This function returns an X window id representing the 
		contents of the fl_root field.
	fl_screen
	fl_scrh		fl_scrh() 
		This function returns an integer representing the 
		contents of the fl_scrh field.
	fl_scrw		fl_scrw() 
		This function returns an integer representing the 
		contents of the fl_scrw field.
	fl_set_atclose
	fl_set_border_width
	fl_set_clipping
	fl_set_clippings
	fl_set_coordunit
	fl_set_font
	fl_set_font_name
	fl_set_gc_clipping
	fl_set_graphics_mode
	fl_set_idle_callback
0.84	fl_set_idle_delta
	fl_set_resource
	fl_set_tabstop
	fl_set_text_clipping
	fl_set_ul_property
	fl_set_visualID
	fl_show_errors
	fl_signal_caught
	fl_textgc
	fl_ul_magic_char	fl_ul_magic_char() 
		This function returns a character representing the 
		contents of the fl_ul_magic_char field.
	fl_unset_clipping
	fl_unset_gc_clipping
	fl_unset_text_clipping
	fl_vclass_name
	fl_vclass_val
	fl_vmode		fl_vmode() 
		This function returns an integer representing the 
		contents of the fl_vmode field.
	fl_vroot		fl_vroot() 
		This function returns an X window id representing the 
		contents of the fl_vroot field.

DEFAULT PROCESSING

	fl_get_defaults
		$iopt = fl_get_defaults();
	fl_set_defaults

DIRECT WINDOW MANIPULATION AND OTHER X FACILITIES

##	fl_create_GC			$GC = fl_create_GC();
		Creates a graphics context on the default display
		for the default window
##	fl_fill_rectangle		
		fl_fill_rectangle($win, $gc, $x, $y, $width, $height);
		Implements XFillRectangle for Xforms
	fl_get_win_geometry
	fl_get_win_origin
	fl_get_win_size
	fl_get_wingeometry		($x, $y, $width, $height)
                                                = fl_get_wingeometry($window);
	fl_get_winorigin		($x, $y) = fl_get_winorigin($window);
	fl_get_winsize			($width, $height) 
						= fl_get_winsize($window);
	fl_initial_wingeometry
	fl_initial_winposition
	fl_initial_winsize
	fl_initial_winstate
	fl_noborder
	fl_pref_wingeometry
	fl_pref_winposition
	fl_pref_winsize
	fl_reset_winconstraints
	fl_set_background
	fl_set_foreground
	fl_set_winstepunit
	fl_text()	fl_textgc()
		This function returns a graphics context representing 
		the contents of the fl_textgc field.
	fl_transient
	fl_win_background
	fl_win_to_form
	fl_winaspect
	fl_winbackground
	fl_winclose
	fl_wincreate
	fl_wingeometry
	fl_winget
	fl_winhide
	fl_winisvalid
	fl_winicon
	fl_winmaxsize
	fl_winminsize
	fl_winmove
	fl_winopen
	fl_winposition
	fl_winresize
	fl_winreshape
	fl_winset
	fl_winshow
	fl_winsize
	fl_winstepunit
	fl_wintitle

MOUSE-RELATED FUNCTIONS

	fl_get_form_mouse		($x, $y) = fl_get_form_mouse(window);
	fl_get_win_mouse 		($x, $y) = fl_get_win_mouse(window);
	fl_get_mouse 			($x, $y) = fl_get_mouse();
0.84	fl_mouse_button
0.84	fl_mousebutton
	fl_set_mouse

XEVENT FUNCTIONS

	fl_XEventsQueued
	fl_XNextEvent			($status, $xevent) =
						fl_XNextEvent();
	fl_XPeekEvent			($status, $xevent) =
                                                fl_XPeekEvent();
	fl_XPutBackEvent
	fl_activate_event_callbacks
	fl_add_event_callback
	fl_add_selected_xevent
	fl_addto_selected_xevent
	fl_last_event
	fl_print_xevent_name
	fl_remove_event_callback
	fl_remove_selected_xevent
	fl_set_event_callback

	note that the co-delivered perl package XEvent may be used in 
	conjunction with these functions to provide low-level XEvent 
	processing

DRAWING

	fl_add_float_vertex
	fl_add_vertex
	fl_arc
	fl_arcf
	fl_bgnclosedline
	fl_bgnline
	fl_bgnpolygon
	fl_circ
	fl_circf
	fl_dashedlinestyle
	fl_diagline
	fl_drawmode
	fl_draw_text
	fl_drw_box
	fl_drw_checkbox
	fl_drw_frame
	fl_drw_text
	fl_drw_text_beside
	fl_drw_text_cursor
	fl_endclosedline
	fl_endline
	fl_endpolygon
	fl_get_drawmode
0.84	fl_get_linestyle
0.84	fl_get_linewidth
	fl_line
	fl_lines		fl_lines($x1, $y1
                                         [,$x2, $y2 [,...[,$xn, $yn,]]],
                                         $color)
	fl_linestyle
	fl_linewidth
	fl_oval
0.84	fl_ovalarc
	fl_oval_bound
	fl_ovalbound
	fl_ovalf
	fl_ovall
	fl_pieslice
	fl_polybound		fl_polybound($x1, $y1
                                             [,$x2, $y2 [,...[,$xn, $yn,]]],
                                             $color)
	fl_polyf		fl_polyf($x1, $y1
                                         [,$x2, $y2 [,...[,$xn, $yn,]]],
                                         $color)
	fl_polygon		fl_polygon($type, $x1, $y1 
					   [,$x2, $y2 [,...[,$xn, $yn,]]],
					   $color)
	fl_polyl		fl_polyl($x1, $y1
                                         [,$x2, $y2 [,...[,$xn, $yn,]]],
                                         $color)
	fl_rect
	fl_rectangle
	fl_rectbound
	fl_rectf
	fl_reset_vertex
	fl_roundrect
	fl_roundrectangle
	fl_roundrectf
0.84	fl_set_drawmode
0.84	fl_set_linestyle
0.84	fl_set_linewidth
	fl_simple_line

CHARACTERS, STRINGS, COLORS

	fl_bk_color
	fl_bk_textcolor
	fl_color
	fl_free_colors
		fl_free_colors($color1[, $color2[,...[, $colorn]]])
	fl_free_pixels
		fl_free_pixels($pixel1[, $pixel2[,...[, $pixeln]]])
	fl_get_align_xy
		($x, $y) = 
			fl_get_align_xy($int1, $int2, $int3,
					$int4, $int5, $int6,
					$int7, $int8, $int9);
	fl_get_char_height 
		($return, $ascend, $descend) = 
			fl_get_char_height($font_style, $font_size);
	fl_get_char_width
	fl_get_flcolor
	fl_get_icm_color
		($r, $g, $b) =
			fl_get_icm_color($color);
	fl_get_pixel
	fl_get_string_dimension
		($ascend, $descend) = 
			fl_get_string_dimesion($font_style, $font_size, 
					       $string, $string_length);
	fl_get_string_height 
		($return, $ascend, $descend) = 
			fl_get_string_height($font_style, $font_size, 
					     $string, $string_length);
	fl_get_string_size
                ($return, $ascend, $descend) = 
                        fl_get_string_size($font_style, $font_size, 
                                           $string, $string_length);
	fl_get_string_width
	fl_get_string_widthTAB
	fl_getmcolor
		($r, $g, $b) =
			fl_getmcolor($color);
	fl_mapcolor
	fl_mapcolor_name
	fl_mapcolorname
	fl_set_color_leak
	fl_set_gamma
	fl_set_icm_color
	fl_textcolor

FORMS

	fl_activate_all_forms
	fl_activate_form
	fl_addto_form
	fl_addto_group
0.84	fl_adjust_form_size
	fl_bgn_form
	fl_bgn_group
	fl_check_forms
	fl_check_only_forms
	fl_deactivate_all_forms
	fl_deactivate_form
	fl_do_forms
	fl_do_only_forms
	fl_end_form
	fl_end_group
0.84	fl_form_is_visible
	fl_free_form
	fl_freeze_all_forms
	fl_freeze_form
	fl_get_app_mainform
	fl_get_form_event_cmask
	fl_hide_form
	fl_lower_form
	fl_mode_capable
	fl_prepare_form_window
	fl_raise_form
	fl_redraw_form
	fl_register_callback
	fl_register_raw_callback
	fl_scale_form
	fl_set_app_mainform
	fl_set_app_nomainform
	fl_set_font
	fl_set_font_name
	fl_set_form_atactivate
	fl_set_form_atclose
	fl_set_form_atdeactivate
	fl_set_form_call_back
	fl_set_form_callback
	fl_set_form_dblbuffer
	fl_set_form_event_cmask
	fl_set_form_geometry
	fl_set_form_hotobject
	fl_set_form_hotspot
	fl_set_form_icon
	fl_set_form_maxsize
	fl_set_form_minsize
	fl_set_form_position
	fl_set_form_property
	fl_set_form_property
	fl_set_form_size
	fl_set_form_title
	fl_set_initial_placement
	fl_show_form
	fl_show_form_window
	fl_unfreeze_all_forms
	fl_unfreeze_form

GENERAL OBJECT FUNCTIONS

	fl_activate_object
	fl_add_object
	fl_call_object_callback
	fl_compute_object_geometry
	fl_deactivate_object
	fl_delete_object
	fl_draw_object_label
0.85	fl_draw_object_label_outside
0.85	fl_draw_object_outside_label
0.85	fl_drw_slider
	fl_fit_object_label
	fl_free_object
0.84	fl_get_object_bbox
	fl_get_object_geometry
		($x, $y, $width, $height) =
			fl_get_object_geometry($object);
	fl_get_object_position
		($x, $y) =
			fl_get_object_position($object);
	fl_hide_object
	fl_make_object
		$object = fl_make_object($type, $x, $y, $width, $height, $label,
				$second_integer, $handler_pointer)
	fl_redraw_object
0.84	fl_reset_focus_object
	fl_scale_object
	fl_set_call_back
	fl_set_focus_object
	fl_set_object_align
	fl_set_object_automatic
	fl_set_object_boxtype
	fl_set_object_bw
	fl_set_object_callback
	fl_set_object_color
	fl_set_object_dblbuffer
	fl_set_object_dblclick
	fl_set_object_focus
	fl_set_object_geometry
	fl_set_object_gravity
	fl_set_object_label
	fl_set_object_lalign
	fl_set_object_lcol
	fl_set_object_lcolor
	fl_set_object_lsize
	fl_set_object_lstyle
	fl_set_object_position
	fl_set_object_posthandler
	fl_set_object_prehandler
	fl_set_object_resize
	fl_set_object_return
	fl_set_object_shortcut
	fl_set_object_shortcutkey
	fl_set_object_size
	fl_show_object
	fl_trigger_object

SPECIFIC OBJECT FUNCTIONS

	BITMAPS

		fl_add_bitmap
		fl_create_bitmap
		fl_create_from_bitmapdata
		fl_read_bitmapfile
			($pixmap, $width, $height, $hotx, $hoty) =
				fl_read_bitmapfile($window, $file_name); 
		fl_set_bitmap_data
		fl_set_bitmap_datafile
		fl_set_bitmap_file

	PIXMAPS

		fl_add_pixmap
		fl_create_pixmap
		fl_create_from_pixmapdata
			($pixmap, $width, $height, $shapemask, $hotx, $hoty) =
				fl_create_from_pixmapdata($win, $tran, 
					$pixmapdatastr1 
					[,$pixmapdatastr2 
					[,...[,$pixmapdatastrn]]]);

			Obviously, the idea here is to have the strings that
			make up the pixmap in an array named @pixmapdatastr
			and to call the function like this:
				fl_create_from_pixmapdata($win, $tran, 
					@pixmapdatastr);

		fl_free_pixmap
		fl_free_pixmap_pixmap
		fl_get_pixmap_pixmap
		fl_read_pixmapfile
			($pixmap, $width, $height, $shapemask, $hotx, $hoty) =
				fl_read_pixmapfile($window, $file_name, $tran); 
		fl_set_pixmap_align
		fl_set_pixmap_colorcloseness
		fl_set_pixmap_data
			fl_set_pixmap_data($object, $pixmapdatastr1, 
				[,$pixmapdatastr2 [,...[,$pixmapdatastrn]]]);

			Obviously, the idea here is to have the strings that
			make up the pixmap in an array named @pixmapdatastr
			and to call the function like this:
				fl_set_pixmap_data($object,@pixmapdatastr);

		fl_set_pixmap_file
		fl_set_pixmap_pixmap

	BOXES

		fl_add_box
		fl_create_box

	BROWSERS

		fl_add_browser
		fl_add_browser_line
		fl_addto_browser
0.84		fl_addto_browser_chars
0.84		fl_append_browser
		fl_clear_browser
		fl_create_browser
		fl_delete_browser_line
		fl_deselect_browser
		fl_deselect_browser_line
		fl_get_browser
		fl_get_browser_dimension	
			($x, $y, $width, $height) =
				fl_get_browser_dimension($object);
		fl_get_browser_line
		fl_get_browser_maxline
		fl_get_browser_screenlines
		fl_get_browser_topline
		fl_insert_browser_line
		fl_isselected_browser_line
		fl_load_browser
		fl_replace_browser_line
		fl_select_browser_line
		fl_set_browser_dblclick_callback
		fl_set_browser_fontsize
		fl_set_browser_fontstyle
0.84		fl_set_browser_hscrollbar
		fl_set_browser_leftscrollbar
		fl_set_browser_leftslider
0.84		fl_set_browser_scrollbarsize
		fl_set_browser_line_selectable
		fl_set_browser_specialkey
		fl_set_browser_topline
		fl_set_browser_vscrollbar
		fl_set_browser_xoffset

	BUTTONS

		fl_add_bitmapbutton
		fl_add_button
		fl_add_checkbutton
		fl_add_lightbutton
		fl_add_pixmapbutton
		fl_add_roundbutton
0.84		fl_add_round3dbutton
		fl_create_bitmapbutton
		fl_create_button
		fl_create_checkbutton
		fl_create_generic_button
			$object = fl_create_generic_button($type, $x, $y, 
				$width, $height, $label, $second_integer)
		fl_create_lightbutton
		fl_create_pixmapbutton
		fl_create_roundbutton
0.84		fl_create_round3dbutton
		fl_free_pixmapbutton_pixmap
		fl_get_button
		fl_get_button_numb
		fl_get_pixmapbutton_pixmap
		fl_set_bitmapbutton_data
		fl_set_bitmapbutton_datafile
		fl_set_bitmapbutton_file
		fl_set_button
		fl_set_button_shortcut
		fl_set_pixmapbutton_align
		fl_set_pixmapbutton_data
			fl_set_pixmapbutton_data($obj, $pixmapdatastr1, 
				[,$pixmapdatastr2 [,...[,$pixmapdatastrn]]]);

			Obviously, the idea here is to have the strings that
			make up the pixmap in an array named @pixmapdatastr
			and to call the function like this:
				fl_set_pixmapbutton_data($obj,@pixmapdatastr);

		fl_set_pixmapbutton_datafile
		fl_set_pixmapbutton_file
0.86		fl_set_pixmapbutton_focus_outline
		fl_set_pixmapbutton_pixmap

	CANVASES

		fl_add_canvas
		fl_add_canvas_handler
		fl_canvas_yield_to_shortcut
		fl_create_canvas
		fl_create_generic_canvas
			$object = fl_make_object($type, $x, $y, $width, 
				$height, $label, $second_integer)
		fl_get_canvas_colormap
		fl_get_canvas_depth
		fl_get_canvas_id
		fl_hide_canvas
		fl_modify_canvas_prop
		fl_remove_canvas_handler
		fl_set_canvas_attributes
		fl_set_canvas_colormap
		fl_set_canvas_decoration
		fl_set_canvas_depth
		fl_set_canvas_visual

	OPEN_GL CANVASES

0.86		fl_activate_glcanvas
		fl_add_glcanvas
		fl_create_glcanvas
		fl_get_glcanvas_attributes
			@attributes = fl_get_glcanvas_attributes($object);
		fl_get_glcanvas_context
		fl_get_glcanvas_defaults
			@defaults = fl_get_glcanvas_defaults();
		fl_get_glcanvas_xvisualinfo
		fl_glwincreate
			($window, $out_int, $glxcontext) = 
				fl_glwincreate($in_int1, $in_int2);
		fl_glwinopen
                         ($window, $out_int, $glxcontext) =
                                fl_glwinopen($in_int1, $in_int2);
		fl_set_glcanvas_attributes
		fl_set_glcanvas_defaults
		fl_set_glcanvas_direct

	CHARTS

		fl_add_chart
		fl_add_chart_value
		fl_clear_chart
		fl_create_chart
		fl_insert_chart_value
		fl_replace_chart_value
		fl_set_chart_autosize
		fl_set_chart_bounds
0.84		fl_set_chart_lcol
0.84		fl_set_chart_lcolor
0.84		fl_set_chart_lsize
0.84		fl_set_chart_lstyle
		fl_set_chart_maxnumb

	CHOICES

		fl_add_choice
		fl_addto_choice
		fl_clear_choice
		fl_create_choice
		fl_delete_choice
		fl_get_choice
		fl_get_choice_item_text
		fl_get_choice_maxitems
		fl_get_choice_text
		fl_replace_choice
		fl_set_choice
		fl_set_choice_shortcut
		fl_set_choice_align
		fl_set_choice_fontsize
		fl_set_choice_fontstyle
		fl_set_choice_item_mode
		fl_set_choice_item_shortcut
		fl_set_choice_text

	CLOCKS

		fl_add_clock
		fl_create_clock
		fl_get_clock	($hrs, $mins, $secs) =
					fl_get_clock($object);

	COUNTERS

		fl_add_counter
		fl_create_counter
0.86		fl_get_counter_bounds
		fl_get_counter_value
		fl_set_counter_bounds
		fl_set_counter_filter
		fl_set_counter_precision
		fl_set_counter_return
		fl_set_counter_step
		fl_set_counter_value

	CURSORS

		fl_create_bitmap_cursor
		fl_get_cursor_byname
		fl_reset_cursor
		fl_set_cursor
		fl_set_cursor_color

	DIALS

		fl_add_dial
		fl_create_dial
		fl_get_dial_bounds
			($lower, $upper) =
				fl_get_dial_bounds($object);
0.84		fl_set_dial_direction
		fl_get_dial_value
		fl_set_dial_angles	
		fl_set_dial_bounds	
		fl_set_dial_cross	
		fl_set_dial_return
		fl_set_dial_step
		fl_set_dial_value

	FRAMES

		fl_add_frame
0.85		fl_add_labelframe
		fl_create_frame
0.85		fl_create_labelframe

	FREE OBJECTS

		fl_add_free
			$object = fl_add_free($type, $x, $y, $width, 
				$height, $label, $callback)
		fl_create_free
			$object = fl_create_free($type, $x, $y, $width, 
				$height, $label, $callback)

	GOODIES

		fl_add_fselector_appbutton
0.84		fl_addto_command_log
0.84		fl_clear_command_log
0.84		fl_close_command
		fl_disable_fselector_cache
0.84		fl_end_all_command
0.84		fl_end_command
0.84		fl_exe_command
0.84		fl_get_command_log_fdstruct
		fl_get_directory
		fl_get_filename
		fl_get_fselector_form
		fl_get_fselector_fdstruct
		fl_get_pattern
0.84		fl_hide_command_log
		fl_hide_fselector
		fl_hide_oneliner
		fl_invalidate_fselector_cache
0.84		fl_open_command
		fl_refresh_fselector
		fl_remove_fselector_appbutton
		fl_set_choices_shortcut
0.84		fl_set_command_log_position
		fl_set_directory
0.85		fl_set_dirlist_sort
		fl_set_fselector_border
		fl_set_fselector_callback
		fl_set_fselector_cb
		fl_set_fselector_filetype_marker
0.84		fl_set_fselector_fontsize
0.84		fl_set_fselector_fontstyle
		fl_set_fselector_placement
		fl_set_fselector_title
		fl_set_fselector_transient
		fl_set_goodies_font
		fl_set_oneliner_color
		fl_set_oneliner_font
		fl_set_pattern
		fl_show_alert
		fl_show_choice
0.85		fl_show_choices
		fl_show_colormap
0.84		fl_show_command_log
		fl_show_file_selector
		fl_show_fselector
		fl_show_input
		fl_show_menu_symbol
		fl_show_message
0.84		fl_show_messages
		fl_show_oneliner
		fl_show_question
0.84		fl_show_simple_input
		fl_use_fselector

	INPUTS

		fl_add_input
		fl_create_input
		fl_get_input
		fl_get_input_cursorpos
			($return, $x, $y) = fl_get_input_cursorpos($object);
0.84		fl_get_input_format
0.84		fl_get_input_numberoflines
0.84		fl_get_input_screenlines
0.84		fl_get_input_topline
		fl_set_input
		fl_set_input_color
		fl_set_input_cursorpos
0.85		fl_set_input_editkeymap
		fl_set_input_filter
0.84		fl_set_input_format
0.84		fl_set_input_hscrollbar
		fl_set_input_maxchars
		fl_set_input_return
		fl_set_input_scroll
0.84		fl_set_input_scrollbarsize
		fl_set_input_selected
		fl_set_input_selected_range
		fl_set_input_shortcut
0.84		fl_set_input_topline
0.84		fl_set_input_vscrollbar
0.84		fl_set_input_xoffset


	MENUS

		fl_add_menu
		fl_addto_menu
		fl_clear_menu
		fl_create_menu
		fl_delete_menu_item
		fl_get_menu
		fl_get_menu_item_mode
		fl_get_menu_item_text
		fl_get_menu_maxitems
		fl_get_menu_text
		fl_replace_menu_item
		fl_set_menu
		fl_set_menu_item_mode
		fl_set_menu_item_shortcut
		fl_set_menu_popup
		fl_setpup_fontsize
		fl_setpup_fontstyle
		fl_show_menu_symbol

	POPUPS

		fl_addtopup
		fl_defpup
		fl_dopup
		fl_freepup
		fl_getpup_mode
		fl_getpup_text
		fl_hidepup
		fl_newpup
		fl_setpup
		fl_setpup_bw
		fl_setpup_checkcolor
		fl_setpup_color
		fl_setpup_cursor
		fl_setpup_default_cursor
		fl_setpup_hotkey
		fl_setpup_maxpup
		fl_setpup_mode
		fl_setpup_pad
		fl_setpup_position
		fl_setpup_selection
		fl_setpup_shadow
		fl_setpup_shortcut
		fl_setpup_softedge
		fl_setpup_submenu
		fl_setpup_title
		fl_showpup

	POSITIONERS

		fl_add_positioner
		fl_create_positioner
		fl_get_positioner_xbounds
			($lower, $upper) =
				fl_get_positioner_xbounds($object);
		fl_get_positioner_xvalue
		fl_get_positioner_ybounds
			($lower, $upper) =
				fl_get_positioner_ybounds($object);
		fl_get_positioner_yvalue
		fl_set_positioner_return
		fl_set_positioner_xbounds
		fl_set_positioner_xstep
		fl_set_positioner_xvalue
		fl_set_positioner_ybounds
		fl_set_positioner_ystep
		fl_set_positioner_yvalue

	SLIDERS

		fl_add_slider
		fl_add_valslider
		fl_create_slider
		fl_create_valslider
		fl_get_slider_bounds
			($lower, $upper) =
				fl_get_slider_bounds($object);
		fl_get_slider_value
		fl_set_slider_bounds
		fl_set_slider_filter
0.85		fl_set_slider_increment
		fl_set_slider_precision
		fl_set_slider_return
		fl_set_slider_size
		fl_set_slider_step
		fl_set_slider_value

	TEXT

		fl_add_text
0.84		fl_add_textbox
0.84		fl_clear_textbox
		fl_create_text
0.84		fl_create_textbox
0.84		fl_get_textbox_longestline
0.84		fl_set_textbox_topline
0.84		fl_set_textbox_xoffset


	TIMERS

		fl_add_timer
		fl_create_timer
		fl_get_timer
0.84		fl_resume_timer
		fl_set_timer
0.84		fl_set_timer_countup
0.84		fl_set_timer_filter
0.84		fl_suspend_timer

	XYPLOTS

		fl_add_xyplot
0.84		fl_add_xyplot_overlay_file
		fl_add_xyplot_overlay 
			fl_add_xyplot_overlay($object, $overlayid, $x1, $x2 
                                              [,$x2, $y2 [,...[,$xn, $yn,]]])
		fl_add_xyplot_text
0.84		fl_clear_xyplot
		fl_create_xyplot
		fl_delete_xyplot_overlay
		fl_delete_xyplot_text
		fl_get_xyplot 
			($x, $y, $dataindex) = 
				fl_get_xyplot($object);
		fl_get_xyplot_data 
			($x, $y, $dataindex) = 
				fl_get_xyplot($object);
		fl_get_xyplot_xbounds
			($lower, $upper) =
				fl_get_xyplot_xbounds($object);
		fl_get_xyplot_xmapping
			($fl1, $fl2) =
				fl_get_xyplot_xmapping($object);
		fl_get_xyplot_ybounds
			($lower, $upper) =
				fl_get_xyplot_ybounds($object);
		fl_get_xyplot_ymapping
			($fl1, $fl2) =
				fl_get_xyplot_ymapping($object);
		fl_interpolate
			($rc, $outx, $outy) =
				fl_interpolate($x1, $y2,
                                           [,$x2, $y2 [,...[,$xn, $yn]]],
					   grid, ndeg)
			This may be a wrong interpretation of this function
			but its all I can glean from the documentation at
			the moment. Please notify me if you find it wrong.
		fl_replace_xyplot_point
0.84		fl_set_xyplot_alphaytics
		fl_set_xyplot_data 
			fl_set_xyplot_data($object, $x1, $x2
                                           [,$x2, $y2 [,...[,$xn, $yn]]],
					   $title, $xlabel, $ylabel)
		fl_set_xyplot_datafile
		fl_set_xyplot_file
0.84		fl_set_xyplot_fixed_xaxis
0.84		fl_set_xyplot_fixed_yaxis
		fl_set_xyplot_fontsize
		fl_set_xyplot_fontstyle
		fl_set_xyplot_inspect
		fl_set_xyplot_interpolate
0.84		fl_set_xyplot_linewidth
		fl_set_xyplot_maxoverlays
		fl_set_xyplot_overlay_type
		fl_set_xyplot_return
		fl_set_xyplot_symbolsize
		fl_set_xyplot_xbounds
0.84		fl_set_xyplot_xgrid
		fl_set_xyplot_xscale
		fl_set_xyplot_xtics
		fl_set_xyplot_ybounds
0.84		fl_set_xyplot_ygrid
		fl_set_xyplot_yscale
		fl_set_xyplot_ytics
		fl_xyplot_s2w  
			($wx, $wy) = fl_xyplot_w2s($object, $sx, $sy);
		fl_xyplot_w2s  
			($sx, $sy) = fl_xyplot_w2s($object, $wx, $wy);
